name: CI Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: x64
            cmake_tuple: x64-x64
            openssl_tuple: x64-amd64-VC-WIN64A
            ffmpeg_tuple: x64-amd64
            libplacebo_tuple: x64-CLANG64
          - os: windows-latest
            platform: ARM64
            cmake_tuple: ARM64-ARM64
            openssl_tuple: arm64-amd64_arm64-VC-WIN64-ARM
            ffmpeg_tuple: arm64-amd64_arm64
            libplacebo_tuple: ARM64-CLANGARM64
          - os: windows-latest
            platform: x86
            cmake_tuple: x86-x86
            openssl_tuple: x86-x86-VC-WIN32
            ffmpeg_tuple: x86-x86
            libplacebo_tuple: x86-CLANG32
          - os: macos-11.0
            platform: macOS

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Initialize Submodules
        run: git submodule update --init

      - name: Install NASM
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then
            choco install nasm -y
          elif [ "${{ runner.os }}" == "macOS" ]; then
            brew install nasm
          fi
        shell: bash

      - name: Install Vulkan SDK
        if: ${{ runner.os == 'Windows' }}
        run: |
          curl -o vulkan_sdk.exe https://sdk.lunarg.com/sdk/download/latest/windows/vulkan_sdk.exe
          ./vulkan_sdk.exe --root C:\Vulkan --accept-licenses --default-answer --confirm-command install
        shell: pwsh

      - name: Build and Test
        run: |
          mkdir build
          cd build
          mkdir SDL
          cd SDL
          ..\..\build-sdl.bat ${{ matrix.cmake_tuple }}
          cd ..
        if: runner.os == 'Windows'
        shell: cmd
      
      - name: Build and Test (non-Windows)
        run: |
          mkdir build
          cd build
          mkdir SDL
          cd SDL
          ../../build-sdl.sh
          cd ..
        if: runner.os != 'Windows'
        shell: bash

      - name: Debug Build Output
        run: |
          echo "Listing contents of the build directory recursively:"
          if [[ $RUNNER_OS == 'Windows' ]]; then
            # Using Powershell command to list directories since 'dir' is not directly compatible in bash on Windows
            powershell -Command "Get-ChildItem -Path .. -Recurse"
          else
            ls -R ..
          fi
        shell: bash

      - name: Archive Artifacts
        if: ${{ runner.os == 'Windows' }}
        run: cmd /c archive.bat ${{ matrix.platform }}
        shell: cmd


      - name: Upload Artifact (Zip)
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.platform }}
          path: windows-${{ matrix.platform }}.zip
          if-no-files-found: error
          compression-level: 6
          overwrite: false
          include-hidden-files: false
